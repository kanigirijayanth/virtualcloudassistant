import React, { useState, useEffect } from 'react';
import { Card, Accordion, Badge, Alert } from 'react-bootstrap';

/**
 * KnowledgeBaseResult Component
 * 
 * Displays knowledge base query results in a structured format.
 * Handles both generated answers and source documents.
 * 
 * @param {Object} props Component properties
 * @param {string} props.title Title of the knowledge base result
 * @param {Array|string} props.content Content of the knowledge base result
 * @param {string} props.source Source of the knowledge base result
 * @param {Object} props.metadata Additional metadata for the knowledge base result
 */
const KnowledgeBaseResult = ({ title, content, source, metadata }) => {
    const [expanded, setExpanded] = useState(false);
    const [error, setError] = useState(null);
    const [parsedContent, setParsedContent] = useState(null);
    
    // Process content on component mount or when content changes
    useEffect(() => {
        try {
            // If content is a string but looks like JSON, try to parse it
            if (typeof content === 'string' && 
                (content.trim().startsWith('{') || content.trim().startsWith('['))) {
                try {
                    const parsed = JSON.parse(content);
                    console.log('Successfully parsed string content as JSON:', parsed);
                    setParsedContent(parsed);
                    setError(null);
                } catch (parseError) {
                    console.warn('Content looks like JSON but failed to parse:', parseError);
                    setParsedContent(null);
                }
            } else {
                // Use content as is
                setParsedContent(content);
                setError(null);
            }
        } catch (err) {
            console.error('Error processing knowledge base content:', err);
            setError(`Error processing content: ${err.message}`);
        }
    }, [content]);
    
    // Helper function to extract filename from S3 URI
    const getFilenameFromS3Uri = (uri) => {
        if (!uri) return 'Unknown';
        const parts = uri.split('/');
        return parts[parts.length - 1];
    };
    
    // Helper function to format source display
    const formatSource = (src) => {
        if (!src) return null;
        if (src === 'Generated by Nova Lite' || src === 'Generated by Nova Sonic') {
            return <Badge bg="info">{src}</Badge>;
        }
        return <small className="text-muted">{getFilenameFromS3Uri(src)}</small>;
    };
    
    // Render processing time if available
    const renderProcessingTime = () => {
        if (metadata && metadata.processing_time) {
            const { retrieval, generation, total } = metadata.processing_time;
            return (
                <div className="processing-time mt-2">
                    <small className="text-muted">
                        Processing time: {total} (Retrieval: {retrieval}, Generation: {generation})
                    </small>
                </div>
            );
        }
        return null;
    };
    
    // Handle different content types
    const renderContent = () => {
        // If there's an error, display it
        if (error) {
            return (
                <Card.Body>
                    <Alert variant="danger">
                        {error}
                    </Alert>
                    <Card.Text>Raw content: {JSON.stringify(content)}</Card.Text>
                </Card.Body>
            );
        }
        
        // If content is a string, display it directly
        if (typeof parsedContent === 'string') {
            return (
                <Card.Body>
                    <Card.Text>{parsedContent}</Card.Text>
                    {source && <div className="mt-2">{formatSource(source)}</div>}
                </Card.Body>
            );
        }
        
        // If content is an array, display as accordion
        if (Array.isArray(parsedContent)) {
            // Check if first item is a generated answer
            const hasGeneratedAnswer = parsedContent.length > 0 && 
                (parsedContent[0].source === 'Generated by Nova Lite' || 
                 parsedContent[0].source === 'Generated by Nova Sonic');
            
            return (
                <Card.Body>
                    {/* Display generated answer prominently if available */}
                    {hasGeneratedAnswer && (
                        <div className="generated-answer mb-4">
                            <h6><Badge bg="info">Generated Answer</Badge></h6>
                            <Card.Text>{parsedContent[0].content}</Card.Text>
                        </div>
                    )}
                    
                    {/* Display processing time if available */}
                    {renderProcessingTime()}
                    
                    {/* Display source documents in accordion */}
                    <Accordion className="mt-3">
                        <Accordion.Item eventKey="0">
                            <Accordion.Header onClick={() => setExpanded(!expanded)}>
                                {expanded ? 'Hide' : 'Show'} Source Documents ({parsedContent.length - (hasGeneratedAnswer ? 1 : 0)})
                            </Accordion.Header>
                            <Accordion.Body>
                                {parsedContent.map((item, index) => {
                                    // Skip the generated answer in the sources list
                                    if (hasGeneratedAnswer && index === 0) return null;
                                    
                                    return (
                                        <div key={index} className="source-document mb-3 pb-3 border-bottom">
                                            <div className="d-flex justify-content-between align-items-center mb-2">
                                                {formatSource(item.source)}
                                                <Badge bg="secondary">Score: {item.score?.toFixed(2) || 'N/A'}</Badge>
                                            </div>
                                            <div className="source-content">
                                                {item.content}
                                            </div>
                                        </div>
                                    );
                                })}
                            </Accordion.Body>
                        </Accordion.Item>
                    </Accordion>
                </Card.Body>
            );
        }
        
        // If content is an object (like from Bedrock direct response)
        if (parsedContent && typeof parsedContent === 'object') {
            // Try to extract retrievalResults if they exist
            if (parsedContent.retrievalResults && Array.isArray(parsedContent.retrievalResults)) {
                return (
                    <Card.Body>
                        <h6><Badge bg="info">Bedrock Knowledge Base Results</Badge></h6>
                        
                        {/* Display processing time if available */}
                        {renderProcessingTime()}
                        
                        {/* Display retrieval results */}
                        <Accordion className="mt-3" defaultActiveKey="0">
                            <Accordion.Item eventKey="0">
                                <Accordion.Header>
                                    Source Documents ({parsedContent.retrievalResults.length})
                                </Accordion.Header>
                                <Accordion.Body>
                                    {parsedContent.retrievalResults.map((item, index) => {
                                        const content = item.content?.text || 'No content available';
                                        const source = item.location?.s3Location?.uri || 'Unknown source';
                                        const score = item.score || 'N/A';
                                        
                                        return (
                                            <div key={index} className="source-document mb-3 pb-3 border-bottom">
                                                <div className="d-flex justify-content-between align-items-center mb-2">
                                                    {formatSource(source)}
                                                    <Badge bg="secondary">Score: {typeof score === 'number' ? score.toFixed(2) : score}</Badge>
                                                </div>
                                                <div className="source-content">
                                                    {content}
                                                </div>
                                            </div>
                                        );
                                    })}
                                </Accordion.Body>
                            </Accordion.Item>
                        </Accordion>
                    </Card.Body>
                );
            }
            
            // Generic object display
            return (
                <Card.Body>
                    <Card.Text>
                        {Object.entries(parsedContent).map(([key, value]) => (
                            <div key={key} className="mb-2">
                                <strong>{key}:</strong> {typeof value === 'object' ? JSON.stringify(value) : value}
                            </div>
                        ))}
                    </Card.Text>
                </Card.Body>
            );
        }
        
        // Fallback for unknown content type
        return (
            <Card.Body>
                <Card.Text>No content available or unsupported format</Card.Text>
                <small className="text-muted">Raw content type: {typeof content}</small>
            </Card.Body>
        );
    };
    
    return (
        <Card className="knowledge-base-result mb-3">
            <Card.Header>
                <strong>{title}</strong>
            </Card.Header>
            {renderContent()}
        </Card>
    );
};

export default KnowledgeBaseResult;
